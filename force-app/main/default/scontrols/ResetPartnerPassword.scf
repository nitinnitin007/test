<html>
<head>
<script src="https://www.salesforce.com/services/lib/ajax/beta3.3/sforceclient.js" type="text/javascript"></script>
<script type="text/javascript">

//!!!ATTENTION - READ THIS, ACTION REQUIRED!!!
//This is the email template ID that is to be used with this Scontrol. This ID must be updated for the email to go out as intended.
var emailTemplateId = '00X50000000vOFi';

//This is the subject of the email that goes out to partners that includes their temporary credentials.
//it will be used to find the email messages and nullify them. If you do not update this with the proper value then
//the final step to nullify this value will not be taken.
var emailSubject = 'Email: Your temporary password';

//This function initializes the page display header.
//It is called from the body's onload event.
function printStart() {

    //Not locale aware but then again, we aren't localizing this that's up to the consumer.
    document.getElementById('header').innerHTML = "<h3>Processing Reset Password for {!Contact_FirstName} {!Contact_LastName}...</h3>";
    document.getElementById('header').innerHTML +="<center><img id=\"progress\" src=\"/img/waiting_dots.gif\" alt=\"Processing, please wait\"></center>";
    printOut('',"Confirming Partner User Lookup set............................");

     if('{!Contact_Partner_User_ID}' == '') {
         printOut("FAILED","<br>Error: Partner User lookup field not set.");
     } else {
         printOut("OK","Verifying email template id provided..........................");

         if (emailTemplateId == '') {
             printOut("FAILED","<br>Error: You must supply the record ID of the email template to be used. Update this scontrol with your desired email template and then try again.");

         } else {

             printOut("OK","Initializing API Connection...................................");

             //call the process initialization function
             initPage();
         }
     }
}

//Function initializes the sforce Api Connection
function initPage() {
    sforceClient.registerInitCallback(getUser);
    sforceClient.init("{!API_Session_ID}", "{!API_Partner_Server_URL_70}");
}

//Function to get the username and profile from the User record given the user id from the
//Partner User lookup field on Contact
function getUser() {
    printOut("OK","Retrieving the user record....................................")
    var result = sforceClient.retrieve("Id,UserName,ProfileId","User",['{!Contact_Partner_User_ID}'],verifyProfile);
}

//this function verifies the partner user has a profile with
//API only user checked to assure compliance with security guidelines.
//if this is not set on the profile we will not continue until it's fixed.
//the pop-up will continue to be displayed (not auto-closed) so the user will
//see the error message.
function verifyProfile(result) {
    if (result.className == "Fault") {
        printOut("FAILED","<br>Error: " + result.toString());
        printOut("","It's likely that you do not have the appropriate permission to carry out this action. Please review with your administrator that you have View Setup and Manage Users Permissions")

    } else {
        printOut("OK","Verifying Profile.............................................")

        username  = result[0].get("UserName");
        profileId = result[0].get("ProfileId");

        //call the retrieve for the profile.
        sforceClient.retrieve("Id,Name,PermissionsApiUserOnly","Profile",[profileId],resetPassword);

    }

}

//Function that calls reset password
function resetPassword(retrieveResult) {

    if(retrieveResult.className == "Fault") {
        printOut("FAILED","<br>Error: " + result.toString());

    } else if(!retrieveResult[0].get("PermissionsApiUserOnly")){
        profileId = profileId.substring(0,15);
        printOut("FAILED","<br>Error: <b>User does NOT have a Api Only User selected on their Profile</b>");
        printOut("","Please take one of the following actions and then come back and try again:<br><br>1) <a href=\"#\" onclick=\"window.opener.document.location.replace('/setup/ui/profileedit.jsp?retURL=/{!Contact_ID}&setupid=ManageUsers&id=" + profileId + "');window.close();\">Edit " + retrieveResult[0].get('Name')+ "</a> (Check Api Only User)<br>2) <a href=\"#\" onclick=\"window.opener.document.location.replace('/{!Contact_Partner_User_ID}/e?retURL=/{!Contact_ID}');window.close();\">Edit {!Contact_FirstName} {!Contact_LastName}</a> (Assign an Api Only User Profile)");

    } else {
        printOut("OK","Calling resetPassword.........................................");
        sforceClient.resetPassword('{!Contact_Partner_User_ID}',updateContact);
    }

}

//Function to set the username, temporary password values on the contact
//in the specifically named custom fields
function updateContact(result){

    if (result.className == "Fault") {
        printOut("FAILED","<br>Error: " + result.toString());
     } else {
        printOut("OK","Updating Contact with username, password......................");
        var contact = new Sforce.Dynabean("contact");
        contact.set("Last_Temporary_Password__c",result.password);
        contact.set("Id","{!Contact_ID}");
        contact.set("Partner_User_Name__c",username);

        //update the contact with the values necessary for the partner user to set their new password.
        sforceClient.update([contact],sendEmail);

     }

}

//FUNCTION THAT REDIRECTS THE OPENING WINDOW TO THE SUBMIT EMAIL PAGE, using the specified
function sendEmail(saveResult) {
    if(saveResult[0].success == true) {

        printOut("OK","Sending email now.............................................");
        window.opener.document.location.replace("/email/author/emailauthor.jsp?retURL=%2F{!Contact_ID}&rtype=003&p2_lkid={!Contact_ID}&template_id=" + emailTemplateId + "&save=1");

        if(emailSubject) {
            printOut("OK", "<br><b>Email sent.</b> <br>Deleting record of email for security reasons.");
            window.setTimeout('queryTask()', 1500);

        } else {
            printOut("OK", "<br><b>Email sent.</b> Opening window will refresh, closing this window now.");
            window.setTimeout('window.close()', 1500);
        }

    } else {
        printOut("FAILED","<br>Error: " + saveResult[0].errors[0].message);
    }

}

//This function will nullify the body of the email just sent as it contains sensitive information (temp. password)
function queryTask() {
    query = "SELECT Id,Subject FROM Task WHERE Subject = '" + emailSubject + "' AND WhoId='{!Contact_ID}'";
    printOut("","Query for Tasks...............................................");
    sforceClient.query(query, deleteTasks);
}

function deleteTasks(queryResult) {
    if (queryResult.className == "Fault") {
        printOut("FAILED","<br>Error: " + queryResult.toString());

    } else if(queryResult.records.length == 0) {
        printOut("FAILED","No Tasks found with subject ='" + emailSubject + "' make sure your value is equivalent to what you see in the related list. ");

    } else {

        var ids = new Array();
        for (i=0;i<queryResult.records.length;i++) {
            ids[i]  = queryResult.records[i].get("Id");
        }

        printOut("OK","Deleting " + queryResult.records.length + " Task record(s).....................................");
        sforceClient.Delete(ids,end);
    }

}

//close it down or report info
function end(saveResult) {

    errorCount = 0;
    for(i=0;i<saveResult.length;i++) {
        if(!saveResult[i].success) errorCount++;
    }

    if (saveResult.className == "Fault") {
        printOut("FAILED","<br>Error: " + saveResult.toString());

    } else if(errorCount == 0) {
        printOut("OK","Deleted " + saveResult.length + " Task(s). Closing window automatically now...");
        window.opener.location.reload(true);
        window.setTimeout('window.close()', 1500);

    } else {
        printOut("FAILED","<br>Error: " + errorCount + " records were not saved");

        for(i=0;i<saveResult.length;i++) {
            if(!saveResult[i].success) {
                count = (i + 1);
                printOut("","Record " + count + " of " + saveResult.length + " failed: " + saveResult[i].errors[0].message);
            }
        }

    }
}

//Function to hide the progress meter when an error occurrs.
function hideProgressImg() {
    document.getElementById('progress').style.display = 'none';
}

//Print to page function. Specific to handling status and display messages.
function printOut(status, message) {
    var out = document.getElementById('output');
    if(status == 'FAILED') {
        hideProgressImg();
        out.innerHTML += "<font color=\"red\">FAILED</font>";

    } else if(status == 'OK') out.innerHTML += "<font color=\"green\">OK</font>";

    if(message) out.innerHTML += "<br>" + message;
}


</script>
</head>
<body onload="printStart();">
<div id="header"></div>
<div id="output" style="font-family: monospace; font-size:10pt;"></div>
</body>
</html>