<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>

    <head>
		<style type="text/css">
		body {
		/*  background-image: url(../images/bgTop.gif); */
		    background-position: left top;
		    font-size: 75%;
		    font-family: 'Arial', 'Helvetica', sans-serif;
		    background-color: #FFF;
		}
		
		th {
		    text-align: left;
		    font-weight: bold;
		    font-size: 75%;
		    white-space: nowrap;
		}
		
		
		td {
			font-size: 75%;
		    font-family: 'Arial', 'Helvetica', sans-serif;
		}
		</style>
        <script language="javascript" src="https://www.salesforce.com/services/lib/ajax/beta3.3/sforceclient.js?browser=true" type="text/javascript"></script>
        <!-- Prototype AJAX framework -->
        <script language="javascript" src="http://prototype.conio.net/dist/prototype-1.4.0.js" type="text/javascript"></script>
        
        
        <script>

   <!--

   function initPage() {
       sforceClient.registerInitCallback(setup);
       sforceClient.init("{!API_Session_ID}", "{!API_Partner_Server_URL_70}", true);
   }
   
  
   

// ===================================================================
// Author: Matt Kruse <matt@mattkruse.com>
// WWW: http://www.mattkruse.com/
//
// NOTICE: You may use this code for any purpose, commercial or
// private, without any further permission from the author. You may
// remove this notice from your final code if you wish, however it is
// appreciated by the author if at least my web site address is kept.
//
// You may *NOT* re-distribute this code in any way except through its
// use. That means, you can include it in your product, or your web
// site, or any other form where the code is actually being used. You
// may not put the plain javascript up on your site for download or
// include it in your javascript libraries for download. 
// If you wish to share this code with others, please just point them
// to the URL instead.
// Please DO NOT link directly to my .js files from your site. Copy
// the files to your server and use them there. Thank you.
// ===================================================================

// HISTORY
// ------------------------------------------------------------------
// May 17, 2003: Fixed bug in parseDate() for dates <1970
// March 11, 2003: Added parseDate() function
// March 11, 2003: Added "NNN" formatting option. Doesn't match up
//                 perfectly with SimpleDateFormat formats, but 
//                 backwards-compatability was required.

// ------------------------------------------------------------------
// These functions use the same 'format' strings as the 
// java.text.SimpleDateFormat class, with minor exceptions.
// The format string consists of the following abbreviations:
// 
// Field        | Full Form          | Short Form
// -------------+--------------------+-----------------------
// Year         | yyyy (4 digits)    | yy (2 digits), y (2 or 4 digits)
// Month        | MMM (name or abbr.)| MM (2 digits), M (1 or 2 digits)
//              | NNN (abbr.)        |
// Day of Month | dd (2 digits)      | d (1 or 2 digits)
// Day of Week  | EE (name)          | E (abbr)
// Hour (1-12)  | hh (2 digits)      | h (1 or 2 digits)
// Hour (0-23)  | HH (2 digits)      | H (1 or 2 digits)
// Hour (0-11)  | KK (2 digits)      | K (1 or 2 digits)
// Hour (1-24)  | kk (2 digits)      | k (1 or 2 digits)
// Minute       | mm (2 digits)      | m (1 or 2 digits)
// Second       | ss (2 digits)      | s (1 or 2 digits)
// AM/PM        | a                  |
//
// NOTE THE DIFFERENCE BETWEEN MM and mm! Month=MM, not mm!
// Examples:
//  "MMM d, y" matches: January 01, 2000
//                      Dec 1, 1900
//                      Nov 20, 00
//  "M/d/yy"   matches: 01/20/00
//                      9/2/00
//  "MMM dd, yyyy hh:mm:ssa" matches: "January 01, 2000 12:30:45AM"
// ------------------------------------------------------------------

var MONTH_NAMES=new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var DAY_NAMES=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
function LZ(x) {return(x<0||x>9?"":"0")+x}

// ------------------------------------------------------------------
// isDate ( date_string, format_string )
// Returns true if date string matches format of format string and
// is a valid date. Else returns false.
// It is recommended that you trim whitespace around the value before
// passing it to this function, as whitespace is NOT ignored!
// ------------------------------------------------------------------
function isDate(val,format) {
	var date=getDateFromFormat(val,format);
	if (date==0) { return false; }
	return true;
	}

// -------------------------------------------------------------------
// compareDates(date1,date1format,date2,date2format)
//   Compare two date strings to see which is greater.
//   Returns:
//   1 if date1 is greater than date2
//   0 if date2 is greater than date1 of if they are the same
//  -1 if either of the dates is in an invalid format
// -------------------------------------------------------------------
function compareDates(date1,dateformat1,date2,dateformat2) {
	var d1=getDateFromFormat(date1,dateformat1);
	var d2=getDateFromFormat(date2,dateformat2);
	if (d1==0 || d2==0) {
		return -1;
		}
	else if (d1 > d2) {
		return 1;
		}
	return 0;
	}

// ------------------------------------------------------------------
// formatDate (date_object, format)
// Returns a date in the output format specified.
// The format string uses the same abbreviations as in getDateFromFormat()
// ------------------------------------------------------------------
function formatDate(date,format) {
	format=format+"";
	var result="";
	var i_format=0;
	var c="";
	var token="";
	var y=date.getYear()+"";
	var M=date.getMonth()+1;
	var d=date.getDate();
	var E=date.getDay();
	var H=date.getHours();
	var m=date.getMinutes();
	var s=date.getSeconds();
	var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
	// Convert real date parts into formatted versions
	var value=new Object();
	if (y.length < 4) {y=""+(y-0+1900);}
	value["y"]=""+y;
	value["yyyy"]=y;
	value["yy"]=y.substring(2,4);
	value["M"]=M;
	value["MM"]=LZ(M);
	value["MMM"]=MONTH_NAMES[M-1];
	value["NNN"]=MONTH_NAMES[M+11];
	value["d"]=d;
	value["dd"]=LZ(d);
	value["E"]=DAY_NAMES[E+7];
	value["EE"]=DAY_NAMES[E];
	value["H"]=H;
	value["HH"]=LZ(H);
	if (H==0){value["h"]=12;}
	else if (H>12){value["h"]=H-12;}
	else {value["h"]=H;}
	value["hh"]=LZ(value["h"]);
	if (H>11){value["K"]=H-12;} else {value["K"]=H;}
	value["k"]=H+1;
	value["KK"]=LZ(value["K"]);
	value["kk"]=LZ(value["k"]);
	if (H > 11) { value["a"]="PM"; }
	else { value["a"]="AM"; }
	value["m"]=m;
	value["mm"]=LZ(m);
	value["s"]=s;
	value["ss"]=LZ(s);
	while (i_format < format.length) {
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
			}
		if (value[token] != null) { result=result + value[token]; }
		else { result=result + token; }
		}
	return result;
	}
	
// ------------------------------------------------------------------
// Utility functions for parsing in getDateFromFormat()
// ------------------------------------------------------------------
function _isInteger(val) {
	var digits="1234567890";
	for (var i=0; i < val.length; i++) {
		if (digits.indexOf(val.charAt(i))==-1) { return false; }
		}
	return true;
	}
function _getInt(str,i,minlength,maxlength) {
	for (var x=maxlength; x>=minlength; x--) {
		var token=str.substring(i,i+x);
		if (token.length < minlength) { return null; }
		if (_isInteger(token)) { return token; }
		}
	return null;
	}
	
// ------------------------------------------------------------------
// getDateFromFormat( date_string , format_string )
//
// This function takes a date string and a format string. It matches
// If the date string matches the format string, it returns the 
// getTime() of the date. If it does not match, it returns 0.
// ------------------------------------------------------------------
function getDateFromFormat(val,format) {
	val=val+"";
	format=format+"";
	var i_val=0;
	var i_format=0;
	var c="";
	var token="";
	var token2="";
	var x,y;
	var now=new Date();
	var year=now.getYear();
	var month=now.getMonth()+1;
	var date=1;
	var hh=now.getHours();
	var mm=now.getMinutes();
	var ss=now.getSeconds();
	var ampm="";
	
	while (i_format < format.length) {
		// Get next token from format string
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
			}
		// Extract contents of value based on format token
		if (token=="yyyy" || token=="yy" || token=="y") {
			if (token=="yyyy") { x=4;y=4; }
			if (token=="yy")   { x=2;y=2; }
			if (token=="y")    { x=2;y=4; }
			year=_getInt(val,i_val,x,y);
			if (year==null) { return 0; }
			i_val += year.length;
			if (year.length==2) {
				if (year > 70) { year=1900+(year-0); }
				else { year=2000+(year-0); }
				}
			}
		else if (token=="MMM"||token=="NNN"){
			month=0;
			for (var i=0; i<MONTH_NAMES.length; i++) {
				var month_name=MONTH_NAMES[i];
				if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {
					if (token=="MMM"||(token=="NNN"&&i>11)) {
						month=i+1;
						if (month>12) { month -= 12; }
						i_val += month_name.length;
						break;
						}
					}
				}
			if ((month < 1)||(month>12)){return 0;}
			}
		else if (token=="EE"||token=="E"){
			for (var i=0; i<DAY_NAMES.length; i++) {
				var day_name=DAY_NAMES[i];
				if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {
					i_val += day_name.length;
					break;
					}
				}
			}
		else if (token=="MM"||token=="M") {
			month=_getInt(val,i_val,token.length,2);
			if(month==null||(month<1)||(month>12)){return 0;}
			i_val+=month.length;}
		else if (token=="dd"||token=="d") {
			date=_getInt(val,i_val,token.length,2);
			if(date==null||(date<1)||(date>31)){return 0;}
			i_val+=date.length;}
		else if (token=="hh"||token=="h") {
			hh=_getInt(val,i_val,token.length,2);

			if(hh==null||(hh<1)||(hh>12)){return 0;}
			i_val+=hh.length;}
		else if (token=="HH"||token=="H") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>23)){return 0;}
			i_val+=hh.length;}
		else if (token=="KK"||token=="K") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>11)){return 0;}
			i_val+=hh.length;}
		else if (token=="kk"||token=="k") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>24)){return 0;}
			i_val+=hh.length;hh--;}
		else if (token=="mm"||token=="m") {
			mm=_getInt(val,i_val,token.length,2);
			if(mm==null||(mm<0)||(mm>59)){return 0;}
			i_val+=mm.length;}
		else if (token=="ss"||token=="s") {
			ss=_getInt(val,i_val,token.length,2);
			if(ss==null||(ss<0)||(ss>59)){return 0;}
			i_val+=ss.length;}
		else if (token=="a") {
			if (val.substring(i_val,i_val+2).toLowerCase()=="am") {ampm="AM";}
			else if (val.substring(i_val,i_val+2).toLowerCase()=="pm") {ampm="PM";}
			else {return 0;}
			i_val+=2;}
		else {
			if (val.substring(i_val,i_val+token.length)!=token) {return 0;}
			else {i_val+=token.length;}
			}
		}
	// If there are any trailing characters left in the value, it doesn't match
	if (i_val != val.length) { return 0; }
	// Is date valid for month?
	if (month==2) {
		// Check for leap year
		if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { // leap year

			if (date > 29){ return 0; }
			}
		else { if (date > 28) { return 0; } }
		}
	if ((month==4)||(month==6)||(month==9)||(month==11)) {
		if (date > 30) { return 0; }
		}
	// Correct hours value
	if (hh<12 && ampm=="PM") { hh=hh-0+12; }
	else if (hh>11 && ampm=="AM") { hh-=12; }
	var newdate=new Date(year,month-1,date,hh,mm,ss);
	return newdate.getTime();
	}

// ------------------------------------------------------------------
// parseDate( date_string [, prefer_euro_format] )
//
// This function takes a date string and tries to match it to a
// number of possible date formats to get the value. It will try to
// match against the following international formats, in this order:
// y-M-d   MMM d, y   MMM d,y   y-MMM-d   d-MMM-y  MMM d
// M/d/y   M-d-y      M.d.y     MMM-d     M/d      M-d
// d/M/y   d-M-y      d.M.y     d-MMM     d/M      d-M
// A second argument may be passed to instruct the method to search
// for formats like d/M/y (european format) before M/d/y (American).
// Returns a Date object or null if no patterns match.
// ------------------------------------------------------------------
function parseDate(val) {
	var preferEuro=(arguments.length==2)?arguments[1]:false;
	generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
	monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
	dateFirst =new Array('d/M/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
	var checkList=new Array('generalFormats',preferEuro?'dateFirst':'monthFirst',preferEuro?'monthFirst':'dateFirst');
	var d=null;
	for (var i=0; i<checkList.length; i++) {
		var l=window[checkList[i]];
		for (var j=0; j<l.length; j++) {
			d=getDateFromFormat(val,l[j]);
			if (d!=0) { return new Date(d); }
			}
		}
	return null;
	}            

           function getCurrentDate() {
               currentDate=new Date();
               
               var month = formatDate(currentDate, "MM");
               var day = formatDate(currentDate, "dd");
               var year = formatDate(currentDate, "yyyy");

               return year + "-" + month + "-" + day + "T00:00:00Z";
           }
           
           function getNumberOfUnreviewedSolutions() {
           	var query = "Select s.Id From Solution s where isReviewed = false";
           	return sforceClient.query(query).size;
           }
           
           function getNumberOfSolutions() {
           	var query = "Select s.Id From Solution s";
           	return sforceClient.query(query).size;
           }
           
           function getSolutionStatsHtml() {

           	var content = "<table>" +
           					"<tr><th>Unreviewed</th><td>" + getNumberOfUnreviewedSolutions() + "</td></tr>" + 
           					"<tr><th>Total</th><td>" + getNumberOfSolutions() + "</td></tr>" +
           					"</table>";
           					
           	return content;
           }
           

           //Use this function as the entry point for your DHTML and JAVASCRIPT processing
           function setup() {
               
               //showStats();
               //var queryResult = sforceClient.query(caseQuery, layoutResults);
           }

		function getLineHtml() {
			return "<hr width=\"100%\">";
		}
		
		function showTodaysCases() {
		
			var caseQuery = "Select c.Id, c.CaseNumber, c.Status, c.Subject, c.Solution_Owner__c " + 
                               "From Case c where RecordTypeId = '0123000000008KCAAY'" +
                               " and CreatedDate > " + getCurrentDate();
		
			var caseTable = "<table><tr><th>Case</th><th>Status</th><th>Subject</th><th>Owner</th></tr>";
			
			var cases = query(caseQuery);
			
               for (var i=0;i<cases.length;i++) {
                   var dynaBean = cases[i];
                   caseTable += "<tr><td><a href=\"/" + dynaBean.get("Id") + "\">" + dynaBean.get("CaseNumber") + "</a></td><td>" + 
                   			dynaBean.get("Status") + "</td><td>" + dynaBean.get("Subject") + "</td><td>" + 
                   			dynaBean.get("Solution_Owner__c") + "</td></tr>";

               }
               
               caseTable += "</table>";

               var textNode = document.createTextNode(caseTable);
               
               document.getElementById("searchResults").innerHTML = 
               	"<h3>Solutions</h3><p>" + getSolutionStatsHtml() + "</p>" +
               	"<h3>Cases Opened Today</h3><p>" + caseTable;
               	
               return;
		}
		
		
		function showCasesByBug() {
               //show working message
               var bugNumber = document.searchForm.bugNumber.value;
               
               //check for a non blank value
               if (bugNumber.length == 0) {
               	document.getElementById("searchResults").innerHTML = "";
               	return null;
               }
               
               //check for a non blank value
               if (bugNumber.length != 4) {
               	return null;
               }
               
           
           	//not sure if this works, it should show immediately
               document.getElementById("searchResults").innerHTML = "Finding cases for bug " + bugNumber;
							
			var bugQuery = "Select c.Id, c.CaseNumber, c.ContactId, c.Subject From Case c where Bug_Number__c = '" + bugNumber + "'";
			var foundCases = sforceClient.query(bugQuery);
			var contents = "No Cases Found for Bug " + bugNumber;
			var externalWeb = "";
			
			//check if cases found and if so, display them
			if (foundCases.className == "Fault") {
                   alert("There was an error: " + queryResult.toString());
               } else  {
			
				if (foundCases.size > 0) {
					//reinitialize contents because cases have been found
					contents = "";
				
					for (var i=0;i<foundCases.records.length;i++) {
	                            var caseBean = foundCases.records[i];
	                            
	                            //search for customer and account information
	                            var contactId = caseBean.get("ContactId");
	                            var contactName = "";
	                            var contactPhone = "";
	                            
	                            var contactQuery = "Select c.AccountId, c.LastName, c.FirstName, c.Phone, c.Email From Contact c" +
	                            		" where c.Id = '" + contactId + "'";
	                            //execute query
	                            var contactResults = sforceClient.query(contactQuery);		                            
	                            		
	                            //only proceed if there is no error	and one result is returned	
	                            if (contactResults.className != "Fault" && contactResults.size == 1) { 
	                           		 //get only the first row becase we know there is only one row returned
	                           		 contactRow = contactResults.records[0];	                           		 
	                           		 contactName = contactRow.get("FirstName") + " " + contactRow.get("LastName");
	                           		 contactPhone = contactRow.get("Phone");
	                           		 
	                            }		
	                            
	                            contents += "<tr><td><a href=\"/" + caseBean.get("Id") + "\">" + caseBean.get("CaseNumber") + "</a></td><td>" + 
	                            			caseBean.get("Subject") + "</td><td><a href=\"/" + contactId + "\">" + contactName + "</a></td><td>" + contactPhone + "</td></tr>";
	
	                }
	                
	                contents = "<table><tr><th>Case</th><th>Issue</th><th>Contact</th><th>Phone</th></tr>" + contents + "</table>";
	                
	                //add title
	                contents = "<h3>Cases Reporting Bug #" + bugNumber + "</h3>" + contents;
	                contents += "<p><a href=\"http://lizard/cgi-bin/bugzilla/show_bug.cgi?id=" + bugNumber + "\">View Bug " + bugNumber + "</a></p>";
	                externalWeb = "<IFRAME id=\"itarget\" title=\"Content\" src=\"/servlet/servlet.Integration?lid=01N30000000CwKM&enc=UTF-8\" height=\"600px\" width=\"100%\" scrolling=\"auto\" frameborder=\"0\" ></IFRAME>";
	                
                } 
               }
               document.getElementById("externalWeb").innerHTML = externalWeb;
			document.getElementById("searchResults").innerHTML = contents;
		}

           function layoutResults(queryResult) {

               if (queryResult.className == "Fault") {
                   alert("There was an error: " + queryResult.toString());
               } else {

                   if (queryResult.size > 0) {
                       
                       


                   } else {
                       var textNode = document.createTextNode("No records matched.");
                   }

               }

           }
           
           
           function showContactDetail(id) {
           	var contactQuery = "select Id, FirstName, LastName, Phone, Email, AccountId from Contact c where Id = '" + id + "'";
           	
           	var contacts = query(contactQuery);
           	//should only be one returned contact
           	var contact = contacts[0];
           	var accountName = "";
           	
           	if (contact.get("AccountId") != "") {
           		var accounts = query("select id, name from Account where id = '" + contact.get("AccountId") + "'");
           		accountName = accounts[0].get("Name");
           	}
           	
           	var content = "";
           	content += "<h2>" + contact.get("FirstName") + " " + contact.get("LastName") + "</h2>";
           	content += "" + accountName + "";
           	content += "<p>";
           	content += "<table>";
           	content += "<tr><th>Phone</th><td>" + contact.get("Phone") + "</td><th>Email</th><td>" + contact.get("Email") + "</td></tr>";
           	content += "</table>";
           	
           	//display open cases
           	content += "<h3>Open Cases</h3>";
           	
           	var openCasesQuery = "select id, subject, Status, CaseNumber, Solution_Owner__c from Case where IsClosed = false and ContactId = '" + contact.get("Id") + "'";
         		var cases = query(openCasesQuery);      			
      			var contactName = contact.get("FirstName") + " " + contact.get("LastName");
      			
      			
      			content += "<table>";
      			content += "<tr><th>Case</th><th>Issue</th><th>Age</th><th>Status</th><th>Last Touched</th><th>Actions</th></tr>";
      			
      			for (var i2=0;i2<cases.length;i2++) {
      			
      				var singleCase = cases[i2];
      				var logCallUrl = "https://na3.salesforce.com/00T/e?retURL=%2F" + singleCase.get("Id") + 
      									"&tsk5=Call&" + 
      									"who_id=" + contact.get("Id") + 
      									"&title=Call&" + 
      									"followup=1&" + 
      									"what_id=" + singleCase.get("Id");
      				//calculate how many day's old this case is
				//alert("<a href=\"#\" onClick=\"window.open(\"/" + singleCase.get("Id") + "\",\"caseWindow\",,);\">" + singleCase.get("CaseNumber") + "</a>");
      				content += "<tr><td><a href=\"#\" onClick=\"window.open('/" + singleCase.get("Id") + "','caseWindow','');\">" + singleCase.get("CaseNumber") + "</a></td><td>" + singleCase.get("Subject") + 
      				
      				"</td><td>" + "" + "</td><td>" + singleCase.get("Status") + "</td><td></td><td><a href=\"#\" onclick=\"window.open('" + logCallUrl + "', 'caseCallWindow')\">[log call]</a>[add comment]</td></tr>";
      			}
      			
           	content += "</table>";
           	
           	//show last 5 events with customer
          		content +="<h3>Recent Communiques</h3>";
          		content +="<table>";
          		content +="<tr><th>Date</th><th>Subject</th><th>Type</th><th>Hours</th></tr>";
          		
          		var eventQuery = "Select t.Subject, t.CreatedDate, t.Type, t.Hours__c From Task t where t.WhoId = '" + contact.get("Id") + "'";
          		var events = query(eventQuery);
          		
          		var numEvents = events.length;
          		
          			
          		if (numEvents > 0) {
          			var end = events.length;
          			var start = 0;
          		
          			// set to 5 events or less displayed
          			if (events.length > 5) {
          				start = events.length - 5;
             		} 
          			
          			for (var i3=end-1;i3>start-1;i3--) {
	           			var event = events[i3];
	           			var createdDate = event.get("CreatedDate");
	           			createdDate = formatDate(createdDate, "MM") + "/" + formatDate(createdDate, "dd") + "/" + formatDate(createdDate, "yyyy");
	           			
	           			content += "<tr><td>" + createdDate + "</td><td>" + event.get("Subject") + "</td><td>" + event.get("Type") + "</td><td>" + event.get("Hours__c") + "</td></tr>";
	           		}
          		}
          		
          		content +="</table>";
           		document.getElementById("searchResults").innerHTML = content;
           	
           }
           
           function respondToContactClick() {
           	var contactId = document.searchForm.foundContactList.value;           	
           	showContactDetail(contactId);
           }
           
           function showContacts() {
           	var lastName = document.searchForm.contactLastName.value;
           	
           	if (lastName.length == 0) {
           		document.getElementById("searchResults").innerHTML = "";	
           		return
           	}
           	
           	if (lastName.length < 3) {
           		return
           	} 
           	
           	var contactQuery = "select Id, FirstName, LastName, Phone, Email, AccountId from Contact c where LastName like '" + lastName + "%'";
           	var content = "";
            	
           	//var contacts = query(contactQuery);
           	
           	var contactsResult = sforceClient.query(contactQuery, displayContactDetail);
           	
           	
           	//document.getElementById("searchResults").innerHTML = content;
           }
           
           function displayContactDetail(contactsResult) {
           	content = "<table><tr><th>Name</th><th>Phone</th><th>Email</th><th>Account</th></tr>";
           	
           	var quickListContents = "<select name=\"foundContactList\" id = \"foundContactList\" size=10 onclick=\"respondToContactClick();\">";
           	
           	var contacts = contactsResult.records;
           	
           	if (contacts.length == 1) {
           		var contact = contacts[0];
           		showContactDetail(contact.get("Id"));
           		return;
           	}	
           		
       		if (contacts.length > 0) {
       			for (var i=0;i<contacts.length;i++) {
        			//results found, process contacts
        			var contactRow = contacts[i];
        			
        			var accountId = contactRow.get("AccountId");
        			var accountName = "";
        			
        			var contactName = contactRow.get("LastName") + "," + contactRow.get("FirstName");
        			
        			quickListContents += "<option value=\"" + contactRow.get("Id") + "\">" + contactName.substring(0,15) + "</option>";
        			
        			//build each row
        			content += "<tr><td>" + contactRow.get("FirstName") + " " + contactRow.get("LastName") + "</td><td>" + 
        					contactRow.get("Phone") + "</td><td>" + 
        					contactRow.get("Email") + "</td><td>" +
        					accountName + "</td></tr>";
        			
       			}
          			
          			content += "</table>";
          			quickListContents += "</select>";           	
           			document.getElementById("searchMessages").innerHTML = quickListContents;
          			
          			//add title
          			content = "<h3>Contacts Found for \"" + contactRow.get("LastName") + "\"</h3>" + content;
          		
          		} else {
          			content = "No Contacts Found";
          		}           	
           	
           
           }
           
           function reportError(request)
			{
				alert('Sorry. There was an error. ' + request);
			}
			
			
			var myGlobalHandlers = {
				onCreate: function(){
					Element.show('systemWorking');
				},
		
				onComplete: function() {
					if(Ajax.activeRequestCount == 0){
						Element.hide('systemWorking');
					}
				}
			};
		
			Ajax.Responders.register(myGlobalHandlers);
           
           function showApplianceBasicInfo(amsLocationId)
			{
				var url = 'http://peregrine:3000/appliance/location_list/' + amsLocationId;
				//var pars = '';
				//alert(url);
		        //var myAjax = new Ajax.Updater( {success: 'accountAppliances'}, url, { method: 'get', parameters: pars, onFailure: reportError });
				var content = "<iframe src=\"" + url + "\" frameborder=0></iframe>";
				//alert (content);
				document.getElementById("accountAppliances").innerHTML = content;
		
			}
			
			
			function displayAccountTechContactDetail(techContactDetailResult) {
				var contact = techContactDetailResult.records[0];								
				document.getElementById("accountTechContactName" + contact.get("id")).innerHTML = contact.get("FirstName") + " " + contact.get("LastName");
				document.getElementById("accountTechContactPhone" + contact.get("id")).innerHTML = contact.get("Phone");
				document.getElementById("accountTechContactEmail" + contact.get("id")).innerHTML = contact.get("Email");
				
			}
           
           function displayAccountTechContacts(techContactRoleResult) {
           		var techContactRoles = techContactRoleResult.records;
				var content = "";
					
				if ( techContactRoles.length > 0) {
					content += "<table>";
					content += "<tr><th>Name</th><th>Phone</th><th>Email</th></tr>";
					
					for (var i=0; i < techContactRoles.length;i++) {					
						var contactId = techContactRoles[i].get('ContactId');						
						var contactQuery = "select firstname, lastname, phone, email, id from Contact where id = '" + contactId + "'";						
						var techContactDetailResult = sforceClient.query(contactQuery, displayAccountTechContactDetail);
						content +="<tr><td><div id=\"accountTechContactName" + contactId + "\"></div></td><td><div id=\"accountTechContactPhone" + 
							contactId + "\"></div></td><td><div id=\"accountTechContactEmail" + 
							contactId + "\"></div></td></tr>";
					}
										
					content += "</table>";
					document.getElementById("accountTechContacts").innerHTML = content;					
				}
           }
                      
           function displayAccountHealth() {
           
           }
           
           function displayAccountOpenCaseDetail(openCasesByContactResult) {
         		if (openCasesByContactResult.className == "Fault") {
			       alert("There was an error: " + openCasesByContactResult.toString());			      				
			    } else {
         			var openCases = openCasesByContactResult.records;
          			
          			//alert (openCases.length);
          			
          			if (openCases.length > 0) {         			
          				var content = "";
          			
          				
	           			for (var i3=0;i3<openCases.length;i3++) {					
							var singleCase = openCases[i3];		
							content += "<tr><td>" + singleCase.get("CaseNumber") + "</td><td>" + singleCase.get("Subject") + 
								"</td><td>" + "" + "</td><td>" + singleCase.get("Status") + "</td><td></td></tr>";
						}
						
						
						//alert (content);						
						var key = "accountOpenCasesDetailFor" + singleCase.get("contactId");
						//alert (key);
						document.getElementById(key).innerHTML = content;					
					}
				}
					
           }
           
           function displayAccountOpenCases(accountContactResult) {
				
				var contacts = accountContactResult.records;
				var content = "";
				content += "<table>";				
				content += "<tr><th>Case</th><th>Issue</th><th>Contact</th><th>Status</th><th>Age</th></tr>";
				
				//get open cases for each contact
				for (var i=0;i<contacts.length;i++) {
					var contact = contacts[i];
					//var contactName = contact.get("FirstName") + " " + contact.get("LastName");
					content +="<div id=\"accountOpenCasesDetailFor" + contact.get("id") + "\"></div>";
				}
				
				content +="</table>";
				document.getElementById("accountOpenCases").innerHTML = content;
				
				for (var i=0;i<contacts.length;i++) {
					var contact = contacts[i];
					var openCasesQuery = "select id, subject, Status, contactId, CaseNumber, Solution_Owner__c from Case where IsClosed = false and ContactId = '" + contact.get("Id") + "'";
		 			//alert (openCasesQuery);
		 			var openCasesByContactResult = sforceClient.query(openCasesQuery, displayAccountOpenCaseDetail);
				}
           }
           
           function displayAccountDetails(accountResult) {
           		 if (accountResult.className == "Fault") {
			       alert("There was an error: " + queryResult.toString());			
			    } else {			
			       if (accountResult.size > 0) { 
           		
           			var content = "";
	           		accounts = accountResult.records;
	
					var account = accounts[0];
					var id = account.get("id");
				
					var amsLocationId = account.get("ams_location_id__c");
				
					content = "<h2>" + account.get("Name") + "</h2>";
					content += "<h3>Technical Contacts</h3><div id=\"accountTechContacts\"></div>";
					content += "<h3>Appliances</h3><div id=\"accountAppliances\"><a href=\"#\" onclick=\"showApplianceBasicInfo(" + amsLocationId + ")\">[view appliances]</a></div>";
					content += "<h3>Account Health</h3><div id=\"accountHealth\"></div>";
					content += "<h3>Open Cases</h3><div id=\"accountOpenCases\"></div>";

					document.getElementById("searchMessages").innerHTML = "";
		           	document.getElementById("searchResults").innerHTML = content;
		           	
		           	//make the async calls to populate the information
		           	var techContactRoleQuery = "select ContactId from AccountContactRole a " + 
												"where a.AccountId = '" + id + "' " + 
												"and Role = 'Technical User'";
					var techContactRoleResult = sforceClient.query(techContactRoleQuery, displayAccountTechContacts);
		           	
		           	var accountContactsQuery = "select id, FirstName, LastName from contact where AccountId = '" + id + "'";
		           	var accountContactResult = sforceClient.query(accountContactsQuery, displayAccountOpenCases);
		           	}
	           	}
           }
           
           function respondToAccountClick() {
	           	var accountId = document.searchForm.foundAccountList.value;    
	           	//clear out the field       
	           	document.searchForm.accountName.value = "";	
	           	//showAccountDetail(accountId);
	           	
	           	
	           	
	           	var accountResult = sforceClient.query("select id, name, ams_location_id__c from Account where id = '" + accountId + "'", displayAccountDetails);           	
	           	
           }
           
           function displayAccountDetail(account) {
           
           }
           
           
           function displayAccountSearchResults(queryResult) {
	            if (queryResult.className == "Fault") {
			       alert("There was an error: " + queryResult.toString());			
			    } else {			
			       if (queryResult.size > 0) { 	                      	
	           		var accounts = queryResult.records;
	           		var quickListContents = "<select name=\"foundAccountList\" id = \"foundAccountList\" size=10 onclick=\"respondToAccountClick();\">";
	          	    
	          	    //if one is found, we have a real hit
	          	    if (accounts.length == 1) {
	          	    	respondToAccountClick();
	          	    	//account info popup disabled
	          	    	//popItem(accounts[0].get("Id"));
	          	    	return;
	          	    }        	
	          	            	
		           	for (var i=0;i<accounts.length;i++) {
		           		var singleAccount = accounts[i];           		
		           		quickListContents += "<option value=\"" + singleAccount.get("Id") + "\">" + singleAccount.get("Name").substring(0,15) + "</option>";
		           		
		           	}
		           	
			           	quickListContents += "</select>";           	
			           	document.getElementById("searchMessages").innerHTML = quickListContents;
	           		}
	           	}
           }
           
           function showAccounts() {
           		var accountName = document.searchForm.accountName.value;	         	
	           	var accountQuery = "select id, name from Account where name like '" + accountName + "%'";
           		var queryResult = sforceClient.query(accountQuery, displayAccountSearchResults);          	
           }
           
           //returns variable of records from salesforce
           function query(queryString) {
           
           		queryString = queryString.trim();
           	
	           	if (queryString.length == 0) {
	           		return;
	           	}
	           	
	           	var result = sforceClient.query(queryString); 
	           	
	           	if (result.className != "Fault") {
	           		return result.records;
	           	} else {
	           		alert("There was an error: " + result.toString());
	           	}
           	
           }
           
           
           
           function popItem(id) {
           	var url = "/" + id;
           	window.open(url, 'itemWindow', '');
           }
           
           function reactToSelectedCase() {
           	var id = document.searchForm.foundCaseList.value;
           	popItem(id);
           }
           	
           
           function showCases() {
           	var caseNumber = document.searchForm.caseNumber.value;
           	
           	if (caseNumber.length < 3) {
           		
           	
           		document.getElementById("searchMessages").innerHTML = "";
           		return;
           	} 
           	
           	var caseQuery = "select id, CaseNumber from Case where CaseNumber like '%" + caseNumber + "%'";           	            		
          		var quickListContents = "<select name=\"foundCaseList\" id = \"foundCaseList\" size=10 onClick=\"reactToSelectedCase();\">";          		
          		var cases = query(caseQuery);
          		
          		if (cases.length == 1) {
          			var caseRow = cases[0];

          				popItem(caseRow.get("Id"));
          			
          			   	return;

          		}
          		
          		for (var i=0;i<cases.length;i++) {
          			var caseRow = cases[i];
          			//add row to the picklist
          			quickListContents += "<option value=\"" + caseRow.get("Id") + "\">" + caseRow.get("CaseNumber") + "</option>";
          		}
          		
          		quickListContents += "</select>";           		
          		document.getElementById("searchMessages").innerHTML = quickListContents;
          }

            //-->

        </script>
    </head>

    <body onload="initPage()">
    	<table width="100%">
    	<tr>
    	<td valign="top">
    	<!-- Main Search Results -->
    	<div id="searchResults"></div>
    	<div id="accountAppliances"></div>
    	<div id="externalWeb"></div>
		<!-- End Search Results -->
		
    	</td>
    	<td width="150" valign="top">
    	<!-- Search Fields -->
    	<form name="searchForm">  	
    	<table>
    	<tr><td colspan=2><h3>Quick Search</h3></td></tr>
    	<tr><th>Case</th><td><input id="caseNumber" name="caseNumber" type="text" size="6" onkeyup="showCases();"></td></tr>
    	<tr><th>Last Name</th><td><input id="contactLastName" name="contactLastName" type="text" size="6" onkeyup="showContacts();"></td></tr>
    	<tr><th>Account</th><td><input id="accountName" name="accountName" type="text" size="6" onkeyup="showAccounts();"></td></tr>
    	<tr><th>Bug</th><td><input id="bugNumber" name="bugNumber" type="text" size="6" onkeyup="showCasesByBug();"></td></tr>
    	<tr><td colspan=2><div id="searchMessages"></div></td></tr>
    	<tr><td colspan=2><div id="searchErrors"></div></td></tr>
    	<tr><td colspan=2><a href="#" onclick="showTodaysCases();">View Analysis</a></td></tr>
    	<tr><td colspan=2 height="20">&nbsp</td></tr>
    	<tr><td colspan=2></td></tr>
    	<tr><td colspan=2><div id='systemWorking'><img src='/servlet/servlet.ImageServer?oid=00D3000000007yR&id=015300000006geD'><br>working...</div></td></tr>
    	</table>
    	</form>
    	<!-- End Search Fields -->
    	</td>
    	</tr>
    	</table>
    </body>

</html>